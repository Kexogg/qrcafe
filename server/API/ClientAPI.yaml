openapi: 3.0.3
info:
  title: ClientAPI Documentation
  version: 1.0.0
servers:
  - url: 'https://nyashdev.stk8s.66bit.ru'
  - url: 'https://localhost:44324/'
components: 
  securitySchemes: 
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas: 
    FoodDTO:
      type: object
      properties:
        Id:
          type: integer
          format: int32
        RestaurantID:
          type: integer
          format: int32
        IsAvailable:
          type: boolean
        Name:
          type: string
        Description:
          type: string
        Price:
          type: integer
          format: int32
    EmployeeDTO:
      type: object
      properties:
        Id:
          type: UUID
        FullName:
          type: string
        RoleID:
          type: integer
          format: int32
        RestaurantID:
          type: integer
          format: int32
        Available:
          type: boolean  
paths:
  /api/restaurants/{restId}/login:
    post:
      tags:
        - login
      summary: Authentication with Bearer JWT token
      parameters:
        - name: restId
          in: path
          required: true
          description: id of the restaurant
          allowEmptyValue: false
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                login:
                  description: Employee login
                  type: string
                password:
                  description: Employee password
                  type: string
      responses: 
        404:
          description: Restaurant not found
        401:
          description: Employee unauthorized
        200:
          description: Returns JWT token
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
  /api/clients:
    get:
      tags:
        - clients
      security:
        - bearerAuth: []
      summary: Returns list of clients
      responses:
        404:
          description: Clients not found
        200:
          description: Successful request
    
  
  /api/restaurants/{id}/food:
    get:
      tags:
        - food
      security:
        - bearerAuth: [ ]
      summary: Returns food list of the restaurant
      parameters:
        - name: id
          in: path
          required: true
          description: id of the restaurant
          allowEmptyValue: false
          schema:
            type: integer
      responses: 
        404:
          description: Restaurant not found
        204:
          description: No food available
        200:
          description: Returns food list
          
  /api/restaurants:
    get:
      tags:
        - restaurants
      security:
        - bearerAuth: [ ]
      summary: Returns restaurants list
      responses:
        200:
          description: Returns restaurants list
    
  /api/organizations/{orgId}/restaurants:
    post:
      tags:
        - restaurants
      security:
        - bearerAuth: [ ]
      summary: Creates new restaurant
      parameters:
        - name: orgId
          in: path
          required: true
          description: id of the organization
          allowEmptyValue: false
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                name:
                  description: Restaurant name
                  type: string
                address:
                  description: Restaurant address
                  type: string
      responses:
        400:
          description: Organization does not exist
        200:
          description: Returns new restaurant data

  /api/restaurants/{id}/tables:
    get:
      tags:
        - tables
      security:
        - bearerAuth: [ ]
      summary: Returns tables list of the restaurant
      parameters:
        - name: id
          in: path
          required: true
          description: id of the restaurant
          allowEmptyValue: false
          schema:
            type: integer
      responses:
        404:
          description: Restaurant not found
        204:
          description: No tables
        200:
          description: Returns tables list
    post:
      tags:
        - tables
      security:
        - bearerAuth: [ ]
      summary: Creates new table
      parameters:
        - name: id
          in: path
          required: true
          description: id of the restaurant
          allowEmptyValue: false
          schema:
            type: integer
      responses:
        404:
          description: Restaurant not found
        200:
          description: Returns new table
      
  /api/restaurants/{restaurantId}/tables/{num}:
    put:
      tags:
        - tables
      security:
        - bearerAuth: [ ]
      summary: Reserve a table
      parameters:
        - name: restaurantId
          in: path
          required: true
          description: id of the restaurant
          allowEmptyValue: false
          schema:
            type: integer
        - name: num
          in: path
          required: true
          description: id of the table
          allowEmptyValue: false
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                name:
                  description: Client name
                  type: string
      responses:
        400:
          description: Organization/Restaurant/Table not found
        200:
          description: Successful response. Returns ClientDTO
  
  /api/organizations:
    post:
      tags:
        - organization
      security:
        - bearerAuth: [ ]
      summary: Creates new organization
      requestBody:
        content:
          application/json:
            schema:
              properties:
                fullName:
                  description: Organization full name
                  type: string
                shortName:
                  description: Organization short name
                  type: string
      responses: 
        200: 
          description: Returns new organization data
        
  /api/restaurants/{restId}/employees:
    post:
      tags:
        - employees
      security:
        - bearerAuth: [ ]
      summary: Creates new employee
      parameters:
        - name: restId
          in: path
          required: true
          description: id of the restaurant
          allowEmptyValue: false
          schema:
            type: integer
      requestBody:
          content:
            application/json:
              schema:
                properties:
                  fullName:
                    description: Employee full name
                    type: string
                  login:
                    description: Employee login
                    type: string
                  password:
                    description: Employee password
                    type: string
                  roleId:
                    description: Employee role id
                    type: integer
      responses:
        200:
          description: Returns new employee data
        400:
          description: Restaurant not found