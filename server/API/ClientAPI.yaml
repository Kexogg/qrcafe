openapi: 3.0.3
info:
  title: ClientAPI Documentation
  version: 1.0.0
servers:
  - url: 'https://nyashdev.stk8s.66bit.ru'
  - url: 'https://localhost:44324/'
components: 
  securitySchemes: 
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas: 
    FoodDTO:
      type: object
      properties:
        Id:
          type: integer
          format: int32
        RestaurantID:
          type: integer
          format: int32
        IsAvailable:
          type: boolean
        Name:
          type: string
        Description:
          type: string
        Weight:
          type: integer
        Price:
          type: integer
          format: int32
    EmployeeDTO:
      type: object
      properties:
        Id:
          type: string
        FullName:
          type: string
        RoleID:
          type: integer
          format: int32
        RestaurantID:
          type: integer
          format: int32
        Available:
          type: boolean  
paths:
  /api/restaurants/{restId}/login:
    post:
      tags:
        - login
      summary: Authentication with Bearer JWT token
      parameters:
        - name: restId
          in: path
          required: true
          description: id of the restaurant
          allowEmptyValue: false
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                login:
                  description: Employee login
                  type: string
                password:
                  description: Employee password
                  type: string
      responses: 
        404:
          description: Restaurant not found
        401:
          description: Employee unauthorized
        200:
          description: Returns JWT token
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
  /api/clients:
    get:
      tags:
        - clients
      security:
        - bearerAuth: []
      summary: Returns list of clients
      responses:
        404:
          description: Clients not found
        200:
          description: Successful request
    
    
  /api/restaurants/{restId}/categories/food/{foodId}:
      post:
        tags:
          - categories
          - food
        security:
          - bearerAuth: [ ]
        summary: Adds food in a few categories
        parameters:
          - name: restId
            in: path
            required: true
            description: id of the restaurant
            allowEmptyValue: false
            schema:
              type: integer
          - name: foodId
            in: path
            required: true
            description: id of the food
            allowEmptyValue: false
            schema:
              type: integer
        requestBody:
          content:
            application/json:
              schema:
                properties:
                  categoriesIdList:
                    description: List of required categories id's
                    type: array
        responses: 
          404:
            description: Restaurant not found
          200:
            description: Returns list of categories applied to food
      
  /api/restaurants/{restId}/categories:
    post:
      tags:
        - categories
      security:
        - bearerAuth: [ ]
      summary: Creates new food category
      parameters:
        - name: restId
          in: path
          required: true
          description: id of the restaurant
          allowEmptyValue: false
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                num:
                  description: Category number
                  type: integer
                separate:
                  description: Is category separate
                  type: boolean
                name:
                  description: Category name
                  type: string
                description:
                  description: Category description
                  type: string
      responses: 
        409:
          description: Category with this num is already exists
        404:
          description: Restaurant not found
        200:
          description: returns created category
          
  /api/restaurants/{restId}/food:
    get:
      tags:
        - food
      security:
        - bearerAuth: [ ]
      summary: Returns food list of the restaurant
      description: Returns list of categories and food
      parameters:
        - name: restId
          in: path
          required: true
          description: id of the restaurant
          allowEmptyValue: false
          schema:
            type: integer
      responses: 
        404:
          description: Restaurant not found
        204:
          description: No food available
        200:
          description: Returns food list
    post: 
      tags:
        - food
      security:
        - bearerAuth: [ ]
      summary: Creates new food
      parameters:
        - name: restId
          in: path
          required: true
          description: id of the restaurant
          allowEmptyValue: false
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties: 
                name:
                  description: Name of the food
                  type: string
                description:
                  description: Description of the food
                  type: string
                weight:
                  description: Weight of the food
                  type: integer
                price:
                  description: Price of the food
                  type: integer
                  
      responses: 
        404:
          description: Restaurant not found
        200:
          description: Returns new food object
    
  /api/organizations/{orgId}/restaurants:
    post:
      tags:
        - restaurants
      security:
        - bearerAuth: [ ]
      summary: Creates new restaurant
      parameters:
        - name: orgId
          in: path
          required: true
          description: id of the organization
          allowEmptyValue: false
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                name:
                  description: Restaurant name
                  type: string
                address:
                  description: Restaurant address
                  type: string
      responses:
        400:
          description: Organization does not exist
        200:
          description: Returns new restaurant data
  /api/restaurants/{restId}/categories/{catId}/food:
    post:
      tags:
        - categories
        - food
      security:
        - bearerAuth: [ ]
      summary: Adds few food items in a category
      parameters:
        - name: restId
          in: path
          required: true
          description: id of the restaurant
          allowEmptyValue: false
          schema:
            type: integer
        - name: catId
          in: path
          required: true
          description: id of the category
          allowEmptyValue: false
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                categoriesIdList:
                  description: List of required food id's
                  type: array
      responses:
        404:
          description: Restaurant not found
        200:
          description: Returns list of food added to category
  /api/restaurants/{restId}/tables:
    get:
      tags:
        - tables
      security:
        - bearerAuth: [ ]
      summary: Returns tables list of the restaurant
      parameters:
        - name: restId
          in: path
          required: true
          description: id of the restaurant
          allowEmptyValue: false
          schema:
            type: integer
      responses:
        404:
          description: Restaurant not found
        204:
          description: No tables
        200:
          description: Returns tables list
    post:
      tags:
        - tables
      security:
        - bearerAuth: [ ]
      summary: Creates new table
      parameters:
        - name: restId
          in: path
          required: true
          description: id of the restaurant
          allowEmptyValue: false
          schema:
            type: integer
      responses:
        404:
          description: Restaurant not found
        200:
          description: Returns new table
      
      
  /api/restaurants/{restId}/table/{tableNum}/queue:
    post:
      tags:
        - food
        - queue
      parameters:
        - name: restId
          in: path
          required: true
          description: id of the restaurant
          allowEmptyValue: false
          schema:
            type: integer
        - name: tableNum
          in: path
          required: true
          description: id of the table
          allowEmptyValue: false
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                foodList:
                  description: САША ВСТАВЛЯЙ В ТЕЛО ЗАПРОСА ГОЛЫЙ МАССИВ, БЕЗ НАЗВАНИЯ foodList, Я НЕ ЗНАЮ КАК ОПСИАТЬ В СВАГГЕРЕ МАССИВ БЕЗ ИМЕНИ ;(
                  type: array
                  items: 
                    $ref: "#/components/schemas/FoodDTO" 
      responses:          
        404:
          description: Restaurant not found
        200:
          description: Returns list of FoodQueue items
          content:
            application/json:
              schema:
                properties:
                  queue:
                    description: List of FoodQueue items
                    type: array
                    properties: 
                      id:
                        description: FoodQueue item id
                        type: string
                      client id:
                        description: Client id
                        type: string
                      restaurant id:
                        description: Restaurant id
                        type: integer
                      food id:
                        description: Id of the Food item
                        type: integer
                      state:
                        description: State of the order
                        type: integer
                      created at:
                        description: Time when order was created
                        type: object
                        
  /api/restaurants/{restId}/queue:
    put:
      tags:
        - food
        - queue
      parameters:
        - name: restId
          in: path
          required: true
          description: id of the restaurant
          allowEmptyValue: false
          schema:
            type: integer
      requestBody: 
        content: 
          application/json:
            schema: 
              properties: 
                id:
                  description: Id of the order
                  type: string
                clientId:
                  description: Id of the client
                  type: string
                restaurantId:
                  description: Id of the restaurant
                  type: integer
                foodId:
                  description: Id of the food
                  type: integer
                state:
                  description: New state of the order
                  type: integer
                createdAt:
                  description: Time of the order creation
                  type: string
      responses: 
        
                        
  /api/restaurants/{restId}/tables/{num}:
    put:
      tags:
        - tables
      security:
        - bearerAuth: [ ]
      summary: Reserve a table
      parameters:
        - name: restId
          in: path
          required: true
          description: id of the restaurant
          allowEmptyValue: false
          schema:
            type: integer
        - name: num
          in: path
          required: true
          description: id of the table
          allowEmptyValue: false
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                name:
                  description: Client name
                  type: string
      responses:
        400:
          description: Organization/Restaurant/Table not found
        200:
          description: Successful response. Returns ClientDTO
  
  /api/organizations:
    post:
      tags:
        - organization
      security:
        - bearerAuth: [ ]
      summary: Creates new organization
      requestBody:
        content:
          application/json:
            schema:
              properties:
                fullName:
                  description: Organization full name
                  type: string
                shortName:
                  description: Organization short name
                  type: string
      responses: 
        200: 
          description: Returns new organization data
        
  /api/restaurants/{restId}/employees:
    post:
      tags:
        - employees
      security:
        - bearerAuth: [ ]
      summary: Creates new employee
      parameters:
        - name: restId
          in: path
          required: true
          description: id of the restaurant
          allowEmptyValue: false
          schema:
            type: integer
      requestBody:
          content:
            application/json:
              schema:
                properties:
                  fullName:
                    description: Employee full name
                    type: string
                  login:
                    description: Employee login
                    type: string
                  password:
                    description: Employee password
                    type: string
                  roleId:
                    description: Employee role id
                    type: integer
      responses:
        200:
          description: Returns new employee data
        400:
          description: Restaurant not found